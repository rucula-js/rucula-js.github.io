{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introdu\u00e7\u00e3o ao Rucula","text":"Rucula-js - Gerando Janelas Dinamicamente <p>Bem vindo ao projeto rucula-js, aqui voc\u00ea aprender\u00e1 a criar janelas e consumir API's Rest de uma forma mais r\u00e1pida e mais consistente.  Esque\u00e7a o problema de ter que se preucupar em validar campos, efetuar c\u00e1lculos matem\u00e1ticos, criar e mapear objetos do tipo array e por ultimo o mais redundante, criar div's e mais div's para representar formularios que est\u00e3o passiveis de erros e de falta de padroniza\u00e7\u00e3o.</p>"},{"location":"#os-niveis-de-atuacao-do-rucula-js","title":"Os N\u00edveis de Atua\u00e7\u00e3o do Rucula-js","text":"<p>O rucula funciona em tr\u00eas n\u00edveis, cada nivel representa um etapa e o limite do seu funcionamento</p> <ul> <li>1\u00b0 Nivel Configura\u00e7\u00e3o global da aplica\u00e7\u00e3o - Aqui \u00e9 configurado os ambientes e as localiza\u00e7\u00f5es</li> <li>2\u00b0 Nivel Cria\u00e7\u00e3o e Configura\u00e7\u00e3o da Janela - Aqui se obt\u00e9m todas estrura necess\u00e1ria para cria\u00e7\u00e3o da Janela desejada</li> <li>3\u00b0 Nivel Contru\u00e7\u00e3o da Jenela - Aqui o rucula-js l\u00ea as Configura\u00e7\u00f5es Globais e as Configura\u00e7\u00f5es da Janela e converte em uma interface de usu\u00e1rio amigavel</li> <li>4\u00b0 Nivel - Cria\u00e7\u00e3o e Controle dos Objetos - Com base nos eventos da Janela o Rucula-js cria e valida objetos dinamicamente at\u00e9 o objeto estar 100% em conformidade com as configura\u00e7\u00f5es passadas. Para seber mais visite Conceitos Rucula</li> </ul> <p>1\u00b0 Nivel</p> <pre><code>{\n    \"environments\":[\n        {\n            \"env\":\"development\",\n            \"hostname\":\"https://localhost\",\n            \"port\": \"7299\"\n        }\n    ],\n    \"localizations\":[\n        {\n            \"locales\":\"pt-BR\",\n            \"language\":\"Portugu\u00eas\",\n            \"currency\":\"BRL\",\n            \"maxDecimal\":5\n        }\n    ] \n}   \n</code></pre> <p>2\u00b0 Nivel</p> <pre><code>{\n    \"name\":\"Ordem de Servi\u00e7o\",\n    \"pathController\":\"/api/OrdemServico\",\n    \"urlGetAll\":\"\",\n    \"urlGetId\":\"\",\n    \"type\":\"crud\",\n    \"frames\":[\n       {\n          \"name\":\"\ud83d\udcdd Header OS\",\n          \"type\":\"block\",\n          \"objectDto\":\"ordemDeServico\",\n          \"sequence\":0,\n          \"fields\":[\n             {\n                \"propertDto\":\"codigo\",\n                \"description\":\"C\u00f3digo\",\n                \"information\":\"\",\n                \"type\":\"text\",\n                \"maxLength\":40,\n                \"width\":300,\n                \"max\":0,\n                \"min\":0,\n                \"requerid\":true,\n                \"disable\":false,\n                \"sequence\":1,\n                \"id\":\"1565165\",\n                \"value\":\"bb00eb36-1ec6-4e89-8183-8215735998e6\"\n             },\n             ...Continua\n          ],\n          \"id\":\"981981\"\n       }\n       ...Continua\n    ],\n    \"button\":[\n       {\n          \"method\":\"post\",\n          \"post\":\"\",\n          \"link\":\"\",\n          \"icon\":\"bi bi-save\",\n          \"text\":\"\",\n          \"type\":\"button\",\n          \"color\":\"\",\n          \"target\":\"\",\n          \"urlrelative\":\"\",\n          \"id\":\"8418\"\n       }\n       ...Continua\n    ]\n }\n</code></pre> <p>3\u00b0 Nivel </p> <p>4\u00b0 Nivel</p> <pre><code>{\n   \"codigo\":\"bb00eb36-1ec6-4e89-8183-8215735998e6\",\n   \"dataAbertura\":\"2023-09-08\",\n   \"totalServico\":\"1115.88\",\n   \"dataConclusao\":\"2023-09-10\",\n   \"status\":\"false\",\n   \"cliente\":{\n      \"nome\":\"Reginaldo\",\n      \"telefone\":\"Marinho\",\n      \"email\":\"reginaldo@hotmail.com\",\n      \"endereco\":{\n         \"logradouro\":\"rua aurelio dias\",\n         \"complemento\":\"ap 39\",\n         \"bairro\":\"cecilia antunes\",\n         \"cidade\":\"jundiai\",\n         \"estado\":\"SP\",\n         \"cep\":\"13785-99\",\n         \"pais\":\"BR\"\n      }\n   },\n   \"itensServico\":[\n      {\n         \"zzRowUi\":0,\n         \"descricao\":\"Tr\u00f3ca de \u00f3leo\",\n         \"valorUnitario\":\"600\",\n         \"quantidade\":\"1\",\n         \"subtotal\":\"600\"\n      },\n      {\n         \"zzRowUi\":1,\n         \"descricao\":\"Limpeza de Bico\",\n         \"valorUnitario\":\"45.88\",\n         \"quantidade\":\"1\",\n         \"subtotal\":\"45.88\"\n      },\n      {\n         \"zzRowUi\":2,\n         \"descricao\":\"Troca Pneu\",\n         \"valorUnitario\":\"320\",\n         \"quantidade\":\"4\",\n         \"subtotal\":\"1280\"\n      },\n      {\n         \"zzRowUi\":3,\n         \"descricao\":\"Alinhamento e Balanceamento\",\n         \"valorUnitario\":\"50\",\n         \"quantidade\":\"1\",\n         \"subtotal\":\"50\"\n      }\n   ],\n   \"tecnicoResponsavel\":{\n      \"nome\":\"Carlos Santos\",\n      \"telefone\":\"(11) 9876-5432\",\n      \"email\":\"carlos@email.com\"\n   },\n   \"pagamento\":{\n      \"formaDePagamento\":\"Cart\u00e3o de Cr\u00e9dito\",\n      \"valorTotalPago\":\"350\",\n      \"dataPagamento\":\"2023-09-10\"\n   }\n}\n</code></pre> <p>Ap\u00f3s a cria\u00e7\u00e3o e valida\u00e7\u00e3o do 4\u00b0 n\u00edvel, o rucula-js estar\u00e1 pronto para consumir suas API's\ud83d\ude80</p>"},{"location":"Atalhos/","title":"Atalhos","text":"<p>Para melhorar a performace na utiliza\u00e7\u00e3o do rucula, temos alguns atalhos que nos ajudam no nosso dia-a-dia</p>"},{"location":"Atalhos/#atalhos-globais","title":"Atalhos Globais","text":"Comando Objetivo <code>Ctrl+y</code> Abre e fecha o terminal do rucula"},{"location":"Atalhos/#atalhos-para-frames-do-tipo-line","title":"Atalhos Para Frames do tipo <code>Line</code>","text":"Comando Objetivo <code>Ctrl+enter</code> Cria uma nova linha <code>Ctrl+0</code> remove a linha em foco"},{"location":"Atalhos/#atalhos-para-campos","title":"Atalhos para Campos","text":"Comando Objetivo <code>Ctrl+h</code> mostra para o usu\u00e1rio a informa\u00e7\u00e3o adicional criada no objeto field"},{"location":"conceitos/","title":"Conceitos","text":""},{"location":"conceitos/#conceitos","title":"Conceitos","text":"<p>No rucula-js existem alguns conceitos que ajudar\u00e1 voc\u00ea durante a sua utiliza\u00e7\u00e3o. Esses conceitos est\u00e3o relacionados a como a interface de usu\u00e1rio \u00e9 criada e tamb\u00e9m \u00e0 como o rucula-js consegue garantir o controle dos dados informados.</p>"},{"location":"conceitos/#o-conceito-de-janela","title":"O Conceito de Janela","text":"<p>No Rucula, tudo que \u00e9 relacionado a interface de usu\u00e1rio est\u00e1 dentro de uma <code>Janela</code>. Abaixo da <code>Janela</code> o componente mais inferior \u00e9 o <code>Frame</code>, uma janela \u00e9 composta de um ou mais <code>Frames</code>. </p>"},{"location":"conceitos/#o-conceito-dos-frames","title":"O Conceito Dos Frames","text":"<p>Os Frames s\u00e3o a representa\u00e7\u00e3o gr\u00e1fica dos Objetos. Assim como os objetos tem nome, propriedades, tipos e cardinalidade, os Frames tamb\u00e9m.  </p>"},{"location":"conceitos/#as-caracteristicas-dos-frames-e-dos-objetos","title":"As caracter\u00edsticas dos Frames e dos Objetos","text":"<p>Como mencionado, os Frames s\u00e3o a representa\u00e7\u00e3o gr\u00e1fica dos objetos, logo, cada atributo de um objeto equivale ao mesmo atributo do Frame.  Est\u00e1 entendendo? Se eu configurar uma janela para tr\u00eas Objetos, terei na UI, uma janela com tr\u00eas Frames. Isso \u00e9 incr\u00edvel!</p> <p>Vejamos a tabela de para entre Objeto e Frame</p> Atributo Objeto Frame Nome Usuario Usuario Propriedade Id Id Tipo string,numero,boolean,data input(text, number, checkbox) select(lista de sele\u00e7\u00e3o), radios Cardinalidade 1-1 ou 1-1*N <code>block ou line</code>"},{"location":"conceitos/#conceito-do-objeto-soft","title":"Conceito do Objeto Soft \ud83e\udde9","text":"<p>Como o nome diz, os objetos no Rucula s\u00e3o leves, e o que isso significa? Significa que durante a inicializa\u00e7\u00e3o da janela, os objetos s\u00e3o criados sem  propriedades, com exce\u00e7\u00e3o daqueles campos que tem valores default ou quando a janela est\u00e1 em um estado de manuten\u00e7\u00e3o de dados. vejamos a representa\u00e7\u00e3o:</p> <p>Estrutura do Objeto</p> <pre><code>{\n  \"id\": \"\",\n  \"nome\": \"\",\n  \"idade\": 0\n}\n</code></pre> <p>Objeto Soft Criado</p> <pre><code>{}\n</code></pre>"},{"location":"conceitos/#a-criacao-das-propriedades","title":"A Cria\u00e7\u00e3o das Propriedades","text":"<p>Ap\u00f3s a cria\u00e7\u00e3o dos Objetos, as propriedades j\u00e1 est\u00e3o aptas a serem criadas. Essas propriedades s\u00e3o criadas com base em eventos que ocorrem na interface de usuario, mais precisamente quando h\u00e1 perda de foco no input do usu\u00e1rio. Esse evento da inicio a uma serie de verifica\u00e7\u00f5es que no meio de uma das suas instru\u00e7\u00f5es, a Propriedade \u00e9 criada no seu devido Objeto.</p> <p>Nota: Voc\u00ea deve estar se perguntando, \"Ok, mas se o objeto \u00e9 criado a cada evento no input, isso n\u00e3o deixa o objeto an\u00eamico e com risco de ser enviado com propriedades inexistentes? A resposta para isso \u00e9 N\u00c2O! A seguir mostraremos o conceito da Tabela de Dependencia, que \u00e9 sem duvidas o que d\u00e1 sentido para as demais checagens das propriedades. </p>"},{"location":"conceitos/#conceito-da-tabela-de-dependencia","title":"Conceito da Tabela de Depend\u00eancia","text":"<p>Manter o controle sobre as propriedades de uma janela deve ser uma tarefa obrigat\u00f3ria e isso deve ser consistente. A tabela de depend\u00eancia fornece tudo que \u00e9 necess\u00e1rio para o correto funcionamento de cada input na janela, al\u00e9m de prestar suporte at\u00e9 que o Objeto esteja 100% criado.</p> <p>Nota: Al\u00e9m da tabela de depend\u00eancia que mant\u00e9m todas as depend\u00eancias a serem resolvidas, por baixo dos panos tamb\u00e9m existe uma lista depend\u00eancias n\u00e3o resolvidas, essa lista \u00e9 um ponteiro para a Tabela de Depend\u00eancia, e ela auxilia na performance dos inputs n\u00e3o resolvidos.</p>"},{"location":"conceitos/#o-estado-inicial-da-tabela-de-dependencia","title":"O Estado Inicial da Tabela de Depend\u00eancia","text":"<p>Criado antes da inicializa\u00e7\u00e3o  dos Frames na Janela, a Tabela de Depend\u00eancia segue um crit\u00e9rio que define um padr\u00e3o chave/valor, cada chave representa uma propriedade de um Objeto a ser resolvida e cada valor representa o tipo de depend\u00eancia e a depend\u00eancia resolvida.</p>"},{"location":"conceitos/#o-padrao-chavevalor-e-suas-representacoes-logicas","title":"O Padr\u00e3o Chave/Valor e Suas Representa\u00e7\u00f5es L\u00f3gicas","text":"<p>O padr\u00e3o chave/valor n\u00e3o \u00e9 simplesmente qualquer representa\u00e7\u00e3o alfanum\u00e9rica, dentro dele existem partes l\u00f3gicas que possuem significados mais espec\u00edficos.</p> <p>Antes de come\u00e7ar, vamos imaginar que estamos criando uma Janela simples para cadastro de usu\u00e1rios, para isso, precisamos de um objeto que tenha as seguintes caracter\u00edsticas: </p> <pre><code>{\n  \"id\": \"\",\n  \"nome\": \"\",\n  \"idade\": 0\n}\n</code></pre> <p>As configura\u00e7\u00f5es para cada propriedade do Objeto s\u00e3o: |Propriedade|obrigat\u00f3rio|Max Len|Min|Max| |-----------|-----------|-------|---|---| |id         |Sim        |32     | |nome|sim|50| |idade|sim| 2|18|80|</p> <p>Com essas defini\u00e7\u00f5es, a rotina da tabela de depend\u00eancia cria uma linha de depend\u00eancia para cada propriedade, no final de tudo ter\u00edamos algo no seguinte modelo: |Chave|Valor| |-----|-----| |Usu\u00e1rio.id. | 1,2:32,.| |Usuario.nome. | 1,2:50,.| |Usu\u00e1rio.idade. |1,2:2,3:18,4:80,.|</p> <p>Observa\u00e7\u00e3o: O ultimo <code>.</code> na chave presenta a cardinalidade, como n\u00e3o tem nada ap\u00f3s ele, isso indica que \u00e9 de 1-1, se fosse um objeto do tipo array, seria algo assim:  <code>Usu\u00e1rio.id.0 Usuario.nome.0 Usu\u00e1rio.idade.0</code></p>"},{"location":"conceitos/#as-partes-logicas-da-chave","title":"As partes l\u00f3gicas da Chave","text":"<p>As chaves s\u00e3o constru\u00eddas a partir de tr\u00eas partes l\u00f3gicas, [Objeto.Propriedade.Linha]. Isso pode mudar com base nas cardinalidade  1 - 1 e 1 - 1*N</p> Objeto Propriedade Linha Usu\u00e1rio id Usu\u00e1rio nome Usu\u00e1rio idade <p>Nota: N\u00e3o h\u00e1 linha, logo o objeto \u00e9 de 1 - 1</p>"},{"location":"conceitos/#as-partes-logicas-do-valor","title":"As Partes L\u00f3gicas do Valor","text":"<p>\u00c9 aqui que \u00e9 controlado as depend\u00eancias que devem ser resolvidas. Cada depend\u00eancia tem um n\u00famero, atualmente existem 5 tipos poss\u00edveis de depend\u00eancia para as propriedades.</p> Depend\u00eancia Descri\u00e7\u00e3o 1 Obrigat\u00f3rio 2 Quantidade m\u00e1xima de caracteres 3 N\u00famero m\u00e1ximo 4 N\u00famero M\u00ednimo 5 Express\u00e3o Regular <p>Os tipos de depend\u00eancia por si s\u00f3 n\u00e3o s\u00e3o relevantes, para que eles possam trazer significado para as propriedades \u00e9 necess\u00e1rio que haja algum valor de par\u00e2metro que auxilie na depend\u00eancia, esses valores s\u00e3o adicionados depois do n\u00famero da depend\u00eancia, al\u00e9m disso \u00e9 importante saber que o que separa o c\u00f3digo da depend\u00eancia com o par\u00e2metro de valor \u00e9 o separador \":\".</p> <p>Vamos ao exemplo: Como vimos anteriormente, temos o Objeto usuario, tem tr\u00eas prioridades: <code>id, nome e idade</code>, agora, como a Tabela de Depend\u00eancia se comportaria para as seguintes premissas:</p> Objeto Propriedade Linha 1 2 3 4 5 Chave/Valor Usu\u00e1rio id \u2705 32 <code>usuario.id. 1,2:32</code> Usu\u00e1rio nome \u2705 50 <code>usuario.id. 1,2:50</code> Usu\u00e1rio idade \u2705 2 18 80 <code>usuario.idade. 1,2:2,3:18,4:80</code>"},{"location":"conceitos/#dependecias-nao-resolvidas","title":"Depend\u00eacias n\u00e3o Resolvidas","text":"<p>Como citado anteriormente, al\u00e9m da tabela de depend\u00eancia, existe uma lista de depend\u00eancias n\u00e3o resolvidas. Essas depend\u00eancias s\u00e3o criadas, removidas  e alteradas a cada intera\u00e7\u00e3o com o usu\u00e1rio. Isso que dizer que no in\u00edcio da Janela, quase todos, sen\u00e3o todos os inputs do usu\u00e1rio estar\u00e3o como com depend\u00eancia e a cada evento foco, estar\u00e3o prontos para sa\u00edrem da lista de Depend\u00eancias n\u00e3o Resolvidas.</p>"},{"location":"formulas/","title":"Formulas","text":"<p>Existem situa\u00e7\u00f5es em que \u00e9 desejavel que o input do usu\u00e1rio tenha um comportamento mais eficaz para resolver determinados problemas, para isso, temos algumas formulas que toma conta de alguns comportamentos triviais durante o ciclo de vida da UI.</p> <p>Pontos Importantes: A coluna sentido representa o local onde o resultado da formula ser\u00e1 passado, <code>dentro</code> indica que o valor ser\u00e1 passado para o pr\u00f3prio campo que cont\u00e9m a formula, <code>fora</code> indica que o valor passado ser\u00e1 enviado para outro campo presenta da UI </p> Formula Objetivo Sentido <code>==objectDto.propert</code> Para casos em que \u00e9 necess\u00e1rio a obten\u00e7\u00e3o de valor presente em um objeto especifico dentro <code>=LIN()</code> Para frame do tipo <code>Line</code>, essa formula controla a contagem de linha para uma objeto array. Quando o argumento \u00e9 vazio, a contagem \u00e9 feita sempre da <code>ultima linha + 1</code>, exemplo:<code>1,2,3,4,5,6,7,8,9...</code>. Quando h\u00e1 argumento <code>=LIN(1000)</code>, o valor passado \u00e9 utilizado como valor base para a contagem de linha. Exemplo: <code>1000,2000,3000,4000...</code> dentro <code>=MATH(propert1*propert2)</code> faz a leitura das propriedades passadas e em seguida executa a express\u00e3o matematica dentro <code>=SUM(objectDto.propert)</code> Criada exatamente para campos totalizadores, essa formula calcula o total para o campo em foco e envia para o campo totalizador fora"},{"location":"formulas/#exemplo-de-utilizacao","title":"Exemplo de utiliza\u00e7\u00e3o","text":"<pre><code>        {\n            \"id\": \"78978\",\n            \"propertDto\": \"total\",\n            \"description\": \"total\",\n            \"information\": \"\",\n            \"type\": \"text\",\n            \"maxLength\": 20,\n            \"max\": 0,\n            \"min\": 0,\n            \"requerid\": true,\n            \"disable\": false,\n            \"sequence\": 2,\n            \"formula\":[\"=MATH(quantidade*preco)\",\"=SUM(total.total)\"]  \n          }\n</code></pre>"},{"location":"inputs/","title":"Configura\u00e7\u00f5es de Campos","text":"<p>As configura\u00e7\u00f5es de campos podem variar, cada campo pode conter uma particulariade especifica. Abaixo, listaremos os tipos de campos e suas respectivas particularidades.</p>"},{"location":"inputs/#tabela-de-propriedades-comuns-para-todos-os-tipos","title":"Tabela de Propriedades Comuns para Todos os Tipos","text":"Propriedade Obrigat\u00f3rio? Descri\u00e7\u00e3o <code>propertDto</code> \u2705 representa o nome da propriedade que devera ser criada no objeto desejado <code>description</code> \u2705 Nome do campo que aparecer\u00e1 na tela <code>information</code> Esse campo ajuda a colocar uma informa\u00e7\u00e3o adicional ao campo. Para visualizar use o atalho help <code>Ctrl+h</code> <code>type</code> \u2705 Representa o tipo do campo que ser\u00e1 utilizado na interface de usu\u00e1rio <code>maxLength</code> \u2705 Tamanho m\u00e1ximo de caracteres permitidos <code>max</code> Numero m\u00e1ximo permitido <code>min</code> N\u00famero minimo permido <code>requerid</code> \u2705 Indica obrigatoriedade no campo <code>disable</code> \u2705 Indica que o campo pode estar desabilitado para uso <code>sequence</code> \u2705 Esse campo controla a ordem dos campos criados em tela <code>id</code> \u2705 Identificador unido do campo <code>value</code> Representa o valor inicial do campo, podendo ser omitido pela rotina caso o mesmo represente uma formula. Para saber mais veja Formulas. <p>Al\u00e9m das op\u00e7\u00f5es acima, existem casos em que o tipo do campo requer uma particularidade especifica.</p>"},{"location":"inputs/#complemento-da-tabela-para-tipos-especificos","title":"Complemento da tabela para tipos especificos","text":"Propriedade Obrigat\u00f3rio? Descri\u00e7\u00e3o Exemplo de Tipo <code>checkbox</code> para tipo de campo<code>checkbox</code>, representa um array de chave e valor <code>{\"on\":\"2\",\"off\":\"0\"}</code> <code>combo</code> para o tipo <code>select</code>,  representa um array de chave e valor <code>{\"value\": \"text\", \"representation\": \"text\"},{\"value\": \"number\",\"representation\": \"number\"},</code>"},{"location":"inputs/#exempos-de-casos-de-uso","title":"Exempos de Casos de Uso","text":"<ul> <li>text</li> <li>number</li> <li>date</li> </ul> <pre><code>{\n    \"propertDto\": \"numero\",\n    \"description\": \"Numero\",\n    \"information\": \"\",\n    \"type\": \"text\",\n    \"maxLength\": 32,\n    \"max\": 0,\n    \"min\": 0,\n    \"requerid\": true,\n    \"disable\": false,\n    \"sequence\": 1,\n    \"id\": \"1565165\",\n    \"value\":\"b242f3b3-aa33-4d0e-91c0-746b0c6f0afe\"\n}\n</code></pre> <ul> <li>checkbox</li> </ul> <pre><code>{\n   \"propertDto\": \"concluida\",\n    \"description\": \"Concluida\",\n    \"information\": null,\n    \"type\": \"checkbox\",\n    \"checkbox\":{\"on\":\"2\",\"off\":\"0\"},\n    \"maxLength\": 20,\n    \"max\": 0,\n    \"min\": 0,\n    \"requerid\": true,\n    \"disable\": false,\n    \"sequence\": 3,\n    \"id\": \"iscnscoin\"\n}\n</code></pre> <ul> <li>select</li> </ul> <pre><code>{\n    \"id\": \"ewfffe\",\n    \"propertDto\": \"type\",\n    \"description\": \"type\",\n    \"information\": null,\n    \"type\": \"select\",\n    \"combo\": [\n    {\n        \"value\": \"text\",\n        \"representation\": \"text\"\n    },\n    {\n        \"value\": \"number\",\n        \"representation\": \"number\"\n    },\n    {\n        \"value\": \"select\",\n        \"representation\": \"select\"\n    },\n    {\n        \"value\": \"check\",\n        \"representation\": \"check\"\n    },\n    {\n        \"value\": \"radio\",\n        \"representation\": \"radio\"\n    }\n    ],\n    \"maxLength\": 10,\n    \"max\": 0,\n    \"min\": 0,\n    \"requerid\": true,\n    \"disable\": false,\n    \"sequence\": 5\n}\n</code></pre>"},{"location":"objetos/","title":"Os Objetos","text":""},{"location":"objetos/#amarracao-dos-objetos","title":"Amarra\u00e7\u00e3o dos Objetos","text":"<p>No rucula, todos os objetos s\u00e3o criados isoladamente um dos outros, isso facilita o desenvolvimento e manuten\u00e7\u00e3o da ferramente, al\u00e9m de facilitar no gerenciamento da obten\u00e7\u00e3o e inser\u00e7\u00e3o de dados. Para que cada objeto filho fique dentro do seu respectivo pai, \u00e9 necess\u00e1rio fazer a amarra\u00e7\u00e3o entre objetos hierarquicamente, isso garante que quando um objeto filho for passado para seu pai, ele j\u00e1 tenha recebido seus possiveis filhos.</p> <pre><code>{\n    \"joinChield\":[\n        {\n          \"key\":\"ordem_de_servico\",\n          \"value\":\"cliente\"\n       },\n       {\n          \"key\":\"cliente\",\n          \"value\":\"endereco\"\n       },\n       {\n          \"key\":\"ordem_de_servico\",\n          \"value\":\"itens_servico\"\n       },\n       {\n          \"key\":\"ordem_de_servico\",\n          \"value\":\"tecnico_responsavel\"\n       },\n       {\n          \"key\":\"ordem_de_servico\",\n          \"value\":\"pagamento\"\n       }\n    ],\n}\n</code></pre> <p>No exemplo acima haveria um erro, porque a hierarquia n\u00e3o est\u00e1 sendo respeitada, no backgroup o rucula l\u00ea o  array da forma em que ele foi especificado, logo, teriamos <code>ordem_de_servico:cliente</code> e quando <code>cliente:endereco</code> fosse informado, haveria um erro pois o rucula n\u00e3o iria encontrar o objeto cliente.</p> <pre><code>{\n    \"joinChield\":[\n       {\n          \"key\":\"cliente\",\n          \"value\":\"endereco\"\n       },\n       {\n          \"key\":\"ordem_de_servico\",\n          \"value\":\"cliente\"\n       },\n       {\n          \"key\":\"ordem_de_servico\",\n          \"value\":\"itens_servico\"\n       },\n       {\n          \"key\":\"ordem_de_servico\",\n          \"value\":\"tecnico_responsavel\"\n       },\n       {\n          \"key\":\"ordem_de_servico\",\n          \"value\":\"pagamento\"\n       }\n    ],\n}\n</code></pre> <p>Agora aqui n\u00e3o teria erro porque primero foi passado a instru\u00e7\u00e3o de que o objeto endereco deve ser atribuido ao cliente que por sua vez \u00e9 atruido \u00e0 order_de_servico</p> <p><code>order_de_servico:cliente:endereco</code></p>"},{"location":"style/","title":"Estilo","text":"Classe descri\u00e7\u00e3o objetivo <code>r-i-control</code> Input de Cotrole Recebe entrada de texto <code>f-t-line</code> Frame Type Line Essa classe representa a caixa que obt\u00e9m a tabela para os inputs do tipo line <code>r-g-i-i</code> Grupo Item Input Guarda os inputs e os labels <code>r-q-l</code> Rucula Quadro Line Representa a caixa do frame do tipo line <code>r-q-b</code> Rucula Quadro Block Representa a caixa do frame do tipo Block <code>r-t-f</code> Rucula Titulo Frame ..."},{"location":"terminal/","title":"O Terminal","text":"<p>Desenvolver e observar o que o rucula faz por baixo dos panos pode ser um pouco confuso no come\u00e7o, mas para reduzir ao max\u00edmo essa possivel situa\u00e7\u00e3o, estamos desenvolvendo o terminal do rucula, como ele voc\u00ea digitar alguns comandos e ter informa\u00e7\u00f5es valiosas.</p>"},{"location":"terminal/#comandos-contidos-no-terminal","title":"Comandos contidos no Terminal","text":"comando objetivo <code>ruc --dep</code> Retorna todas as depend\u00eancias que est\u00e3o em aberto na tela do usu\u00e1rio. <code>ruc --obj</code> Retorna o objeto que est\u00e1 sendo construido durante a utiliza\u00e7\u00e3o da tela do usu\u00e1rio. <code>clear</code> ou <code>-c</code> Limpa as informa\u00e7\u00f5es presentes no Terminal <p>OBSERVA\u00c7\u00c3O IMPORTANTE: \u00c9 com base nas depend\u00eancias que o rucula sabe se o objeto que est\u00e1 sendo criado, est\u00e1 em perfeitas condi\u00e7\u00f5es para ser utilizado para outros fins, como por exemplo: Um envio <code>post</code> para uma API de terceiro.</p>"}]}