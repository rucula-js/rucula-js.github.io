{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introdu\u00e7\u00e3o ao Rucula","text":"Rucula-js - Gerando Janelas Dinamicamente <p>Bem vindo ao projeto rucula-js, aqui voc\u00ea aprender\u00e1 a criar janelas e consumir API's Rest de uma forma mais r\u00e1pida e mais consistente.  Esque\u00e7a o problema de ter que se preucupar em validar campos, efetuar c\u00e1lculos matem\u00e1ticos, criar e mapear objetos do tipo array e por \u00faltimo, o mais redundante, criar div's e mais div's para representar formularios que est\u00e3o propensos a erros e falta de padroniza\u00e7\u00e3o.</p>"},{"location":"#os-niveis-de-atuacao-do-rucula-js","title":"Os N\u00edveis de Atua\u00e7\u00e3o do Rucula-js","text":"<p>O rucula funciona em quatro n\u00edveis, cada um sendo representado uma etapa e o limite do seu funcionamento</p> <ul> <li>1\u00b0 Nivel Configura\u00e7\u00e3o global da aplica\u00e7\u00e3o - Aqui \u00e9 configurado os ambi\u00eantes e as localiza\u00e7\u00f5es</li> <li>2\u00b0 Nivel Cria\u00e7\u00e3o e Configura\u00e7\u00e3o da Janela - Aqui se obt\u00e9m todas estruras necess\u00e1rias para cria\u00e7\u00e3o da Janela desejada</li> <li>3\u00b0 Nivel Contru\u00e7\u00e3o da Jenela - Aqui o rucula-js l\u00ea as Configura\u00e7\u00f5es globais e as configura\u00e7\u00f5es da Janela e converte em uma interface de usu\u00e1rio amigavel</li> <li>4\u00b0 Nivel - Cria\u00e7\u00e3o e Controle dos Objetos - Com base nos eventos da Janela o rucula-js cria e valida objetos dinamicamente at\u00e9 o objeto estar 100% em conformidade com as configura\u00e7\u00f5es passadas. Para seber mais visite Conceitos Rucula.</li> </ul> <p>Ap\u00f3s a cria\u00e7\u00e3o e valida\u00e7\u00e3o do 4\u00b0 n\u00edvel, o rucula-js estar\u00e1 pronto para consumir suas API's\ud83d\ude80</p> Contribuidores"},{"location":"Atalhos/","title":"Atalhos","text":"<p>Para melhorar a performace na utiliza\u00e7\u00e3o do rucula, temos alguns atalhos</p>"},{"location":"Atalhos/#atalhos-globais","title":"Atalhos Globais","text":"Comando Objetivo <code>Ctrl+y</code> Abre e fecha o terminal do rucula"},{"location":"Atalhos/#atalhos-para-frames-do-tipo-line","title":"Atalhos Para Frames do tipo <code>Line</code>","text":"Comando Objetivo <code>Ctrl+enter</code> Cria uma nova linha <code>Ctrl+0</code> remove a linha em foco"},{"location":"Atalhos/#atalhos-para-campos","title":"Atalhos para Campos","text":"Comando Objetivo <code>Ctrl+h</code> mostra para o usu\u00e1rio a informa\u00e7\u00e3o adicional criada no objeto field Contribuidores"},{"location":"botoes/","title":"Criando Bot\u00f5es e Eventos","text":"Contribuidores"},{"location":"configuracao/","title":"Configura\u00e7\u00e3o","text":"<p>Atualmente o rucula-js est\u00e1 d\u00edsponivel via NPM</p> <p><code>npm i @reginaldo-marinho/rucula-js</code> ou <code>npm install @reginaldo-marinho/rucula-js</code></p> <p>certifique-se de ter o elemento pai que ser\u00e1 usado pela sua janela</p> <pre><code>&lt;div id=\"rucula-js\"&gt;\n&lt;/div&gt;\n</code></pre> <p>importe as fun\u00e7\u00f5es <code>initGlobalConfiguration</code> e a classe <code>Rucula</code></p> <pre><code>import { initGlobalConfiguration } from \"./src/global/GlobalConfig\"\nimport { Rucula } from \"./src/Rucula\"\n</code></pre> <p>e chame-as no seu cliente</p> <pre><code>let janela:any = {}; // Configura\u00e7\u00f5es da Janela\nlet configuracaoGlobal:any = {}; // Configura\u00e7\u00f5es globais\n\ninitGlobalConfiguration(configuracaoGlobal)\nlet rucula = new Rucula(input as any,\"js\");\n</code></pre> <p>Para a devida estiliza\u00e7\u00e3o, o css pode ser obtido em <code>./public/style.css</code>, caso queira saber mais sobre os estilos rucula-ls, acesse Guia do Desenvolvedo/Estilo.</p> Contribuidores"},{"location":"crud/","title":"Projeto hello word","text":"Contribuidores"},{"location":"endPoints/","title":"Pontos de Entrada","text":"<p>Os pontos de entrada configuram o modo em que as solicita\u00e7\u00f5es http ser\u00e3o feitas, cada um deles pode ser chamado por mais de um bot\u00e3o presente na janela do usu\u00e1rio. Quando o ponto de entrada \u00e9 chamado, ele \u00e9 usado como complemento para a biblioteca http padr\u00e3o do rucula-js. Para saber mais, visite Axios.</p> <pre><code>export interface endPoint {\n    name:string\n    method:\"post\"|\"put\"|\"get\"\n    urlrelative:string\n    params:string\n    body: string\n}\n</code></pre> propriedade descri\u00e7\u00e3o <code>name</code> tamb\u00e9m conhecido como id, a propriedade <code>name</code> \u00e9 a identifica\u00e7\u00e3o do ponto de entrada <code>method</code> indica  ao Axios, o tipo de solicita\u00e7\u00e3o http <code>urlRelative</code> complemento da url base, mais conhecido como path Controller. Para saber mais sobre o comportamento das Url's visite  a p\u00e1gina Url's <code>params</code> Parametros da Url. Para saber mais sobre o comportamento das Url's visite  a p\u00e1gina Url's <code>body</code> Objeto que ser\u00e1 extraido da janela em foco. Para obten\u00e7\u00e3o do objeto como um todo, o valor informado deve ser <code>this</code> Contribuidores"},{"location":"formulas/","title":"Formulas","text":"<p>Existem situa\u00e7\u00f5es em que \u00e9 desejavel que o input do usu\u00e1rio tenha um comportamento mais eficaz para resolver determinados problemas, para isso, temos algumas formulas que toma conta de alguns comportamentos triviais durante o ciclo de vida da UI.</p> <p>Pontos Importantes: A coluna sentido representa o local onde o resultado da formula ser\u00e1 passado, <code>dentro</code> indica que o valor ser\u00e1 passado para o pr\u00f3prio campo que cont\u00e9m a formula, <code>fora</code> indica que o valor passado ser\u00e1 enviado para outro campo presenta da UI </p> Formula Objetivo Sentido <code>==objectDto.propert</code> Para casos em que \u00e9 necess\u00e1rio a obten\u00e7\u00e3o de valor presente em um objeto especifico dentro <code>=LIN()</code> Para frame do tipo <code>Line</code>, essa formula controla a contagem de linha para uma objeto array. Quando o argumento \u00e9 vazio, a contagem \u00e9 feita sempre da <code>ultima linha + 1</code>, exemplo:<code>1,2,3,4,5,6,7,8,9...</code>. Quando h\u00e1 argumento <code>=LIN(1000)</code>, o valor passado \u00e9 utilizado como valor base para a contagem de linha. Exemplo: <code>1000,2000,3000,4000...</code> dentro <code>=MATH(propert1*propert2)</code> faz a leitura das propriedades passadas e em seguida executa a express\u00e3o matematica dentro <code>=SUM(objectDto.propert)</code> Criada exatamente para campos totalizadores, essa formula calcula o total para o campo em foco e envia para o campo totalizador fora"},{"location":"formulas/#exemplo-de-utilizacao","title":"Exemplo de utiliza\u00e7\u00e3o","text":"<pre><code>        {\n            \"id\": \"78978\",\n            \"propertDto\": \"total\",\n            \"description\": \"total\",\n            \"information\": \"\",\n            \"type\": \"text\",\n            \"maxLength\": 20,\n            \"max\": 0,\n            \"min\": 0,\n            \"requerid\": true,\n            \"disable\": false,\n            \"sequence\": 2,\n            \"formula\":[\"=MATH(quantidade*preco)\",\"=SUM(total.total)\"]  \n          }\n</code></pre> Contribuidores"},{"location":"frames/","title":"Frames","text":"<pre><code>export interface frame{\n    name: string,\n    type: string,\n    objectDto: string,\n    vertical:boolean\n    sequence:number\n    fields?:Array&lt;field&gt;\n    line?:Array&lt;line&gt;\n}\n</code></pre> Propriedade Tipo Tefault Descri\u00e7\u00e3o <code>name</code> <code>string</code> Nome descritivo do frame <code>type</code> <code>string</code> <code>block</code> tipo do frame <code>objectDto</code> <code>string</code> nome do objeto que ser\u00e1 representado pelo frame <code>vertical</code> <code>string</code> <code>true</code> Inidica o sentido em que os grupos de inputs ser\u00e3o criados <code>sequence</code> <code>number</code> Ajuda na ordena\u00e7\u00e3o dos frames <code>fields</code> <code>Array</code> Configura\u00e7\u00e3o dos campos - Para frame do tipo <code>block</code> <code>line</code> <code>Array</code> Configura\u00e7\u00e3o dos campos - Para frame do tipo <code>line</code> Contribuidores"},{"location":"grids/","title":"Os Grids","text":"<p>Para se obter a melhor experi\u00eancia ao trabalhar com grid, o tabular foi a escolha perfeita. Com um rico conjunto de configura\u00e7\u00f5es e desempenho, o tabulator se mostra  efetivo ao mostrar suas funcionalides atreladas ao rucula-js. Voc\u00ea pode saber mais sobre o tabulator em tabulator.info.</p>"},{"location":"grids/#configurando-as-colunas-do-grid","title":"Configurando as Colunas do Grid","text":"<p>Ao iniciar uma janela no rucula-js, uma das etapas que ocorrem \u00e9 a consulta e preenchimento dos dados iniciais ao grid esquerdo da janela, essa consulta se d\u00e1 pela configura\u00e7\u00e3o do ponto de entrada <code>get-all-grid</code>, esse \u00e9 um identificador reservado especialmente para o grid que \u00e9 solicitado no array de pontos de entrada no processo de constru\u00e7\u00e3o do grid. Al\u00e9m  desse identificador reservado, tamb\u00e9m temos o <code>get-by-id</code>, que falaremos mais \u00e0 frente.</p> <p>Mas voltando ao ponto pr\u00edcipal, configura\u00e7\u00f5es das colunas, quando iniciado a rotina de cria\u00e7\u00e3o do grid, o rucula-js vai querer saber a configura\u00e7\u00e3o desejada para a janela em evid\u00eancia. Para isso durante a cria\u00e7\u00e3o da configura\u00e7\u00e3o da janela, utilizamos para informar a configura\u00e7\u00e3o das colunas o objeto <code>columnsGrid</code>, esse objeto tem o objetivo de guardar o nome da propriedade que existir\u00e1 durante o termino d\u00e1 consulta <code>get-all-grid</code> e o nome que ser\u00e1 representado para o usu\u00e1rio. vejamos abaixo um exemplo:</p> <pre><code>\"columnsGrid\":[ //objeto de configura\u00e7\u00e3o\n    {\n        \"field\":\"codigo\", // nome da propridade que exisitr\u00e1 ao termino da consulta\n        \"title\":\"codigo da OS\" // Nome que aparecer\u00e1 para o usu\u00e1rio final\n    },\n    {\n        \"field\":\"dataAbertura\",\n        \"title\":\"data Abertura\"\n    }\n],\n</code></pre>"},{"location":"grids/#configurando-os-parametros-do-grid","title":"Configurando os Par\u00e2metros do Grid","text":"<p>Ap\u00f3s a cria\u00e7\u00e3o do grid, o rucula-js da inicio a escuta de eventos <code>click</code> no n\u00edvel de linha, isso \u00e9 necess\u00e1rio porque como qualquer outra aplica\u00e7\u00e3o, ao saber a linha desejada pelo usu\u00e1rio, uma nova solicita\u00e7\u00e3o no n\u00edvel de linha deve ser feita ao backend, o que resulta em um objeto completo que \u00e9 preenchido corretamente na interface do usu\u00e1rio. Esses eventos dizem ao rucula-js para executar o ponto de entrada, cuja identifica\u00e7\u00e3o \u00e9 <code>get-by-id</code>.</p> <p>Observa\u00e7\u00e3o: Note que  <code>get-all-grid</code> e <code>get-by-id</code> s\u00e3o reservados exclusivamente para o caso do grid, e que devem ser configuradas de modo que fa\u00e7a sentido para cada janela.</p> <pre><code>\"endPoints\":[\n      {\n         \"name\":\"create-os\", // Identificador qualquer\n         \"method\":\"post\",\n         \"body\": \"this\"\n      },\n      {\n         \"name\":\"delete-os\",\n         \"method\":\"delete\",\n         \"params\":\"/{{ordemDeServico.codigo}}\" // Identificador qualquer\n      },\n      {\n         \"name\":\"update-os\",// Identificador qualquer\n         \"method\":\"put\",\n         \"params\":\"/{{ordemDeServico.codigo}}\",\n         \"body\": \"this\"\n      },\n      {\n         \"name\":\"get-all-grid\", // Identificador exclusivo\n         \"method\":\"get\"\n      },\n      {\n         \"name\":\"get-by-id\", // Identificador exclusivo\n         \"method\":\"get\"\n      }\n    ],\n</code></pre> <p>Caso n\u00e3o entenda porque <code>get-all-grid</code> e <code>get-by-id</code>, mesmo quase que vazios s\u00e3o relevantes, veja URL's</p> <p>Encontrou algum erro? Sugest\u00e3o de melhorias? Crie um relat\u00f3rio de bug em rucula-js</p> Contribuidores"},{"location":"hello-world/","title":"Hello World","text":"<p>Ap\u00f3s a configura\u00e7\u00e3o inicial, \u00e9 hor\u00e1 de iniciarmos uma janela <code>crud</code> bem simples. O intuito desse cap\u00edtulo \u00e9 fornecer uma ideia inicial do rucula-js.</p> <p>Nota: N\u00e3o se preocupe com a configura\u00e7\u00e3o da janela, antente-se somente em ver o resultado final. Falaremos sobre cada configura\u00e7\u00e3o posteriormente</p> <pre><code>    let confHello = {\n    \"name\": \"Hello World\",\n    \"pathController\": \"/HelloWorld\",\n    \"type\": \"crud\",\n    \"messageHome\": \"Hello  World\",\n    \"iconHome\": \"bi-rocket-takeoff\",\n    \"this\": \"hello\",\n    \"frames\": [\n        {\n        \"name\": \"Header\",\n        \"objectDto\": \"hello\",\n        \"sequence\": 0,\n        \"fields\": [\n            {\n            \"propertDto\": \"codigo\",\n            \"description\": \"C\u00f3digo\",\n            \"maxLength\": 40,\n            \"width\": 300,\n            \"sequence\": 1,\n            \"value\":\"Hello world\"\n            }\n        ]\n        }\n    ],\n    \"joinChield\": [\n    ],\n    \"endPoints\": [\n    ]\n    }\n</code></pre> <p>Ao criar a configura\u00e7\u00e3o da janela, podemos passa-la para a nossa classe Rucula, a partir disso o rucula-js criar\u00e1 autom\u00e1ticamente uma interface em modelo <code>crud</code> pronta para uso.</p> <pre><code>    let rucula = new Rucula(confHello,\"js\");\n</code></pre> Contribuidores"},{"location":"inputs/","title":"Configura\u00e7\u00f5es de Campos","text":"<p>As configura\u00e7\u00f5es de campos representam o tipo gr\u00e1fico de componente que ser\u00e1 criado e tamb\u00e9m, para alguns casos, a representa\u00e7\u00e3o de do tipo sa\u00edda. </p> <p>Os tipos de sa\u00edda s\u00e3o configurados para casos em que a representa\u00e7\u00e3o gr\u00e1fica deve retornar um tipo diferente no processo de manipula\u00e7\u00e3o do mesmo. Campos do tipo 'checkbox', 'radio' e 'select',  tem representa\u00e7\u00f5esgr\u00e1ficas de um tipo, mas  durante sua resolu\u00e7\u00e3o, o tipo deve ser convertido para um caso especial.</p>"},{"location":"inputs/#os-tipos","title":"Os Tipos","text":"<p>O rucula-js presta suporte para uma quantidade de compontes gr\u00e1ficos e tipos, na maioria dos casos os inputs do tipo <code>text</code> resolver\u00e3o o problema, entretanto, haver\u00e1 cenarios, onde outro tipo seja mais conveniente.</p>"},{"location":"inputs/#configurando-os-tipos-com-as-duas-formais-possiveis","title":"Configurando os Tipos com as Duas Formais Poss\u00edveis","text":"<p>A configura\u00e7\u00e3o de tipo requer duas sintaxe diferentes, em primerio lugar utilizamos a sintaxe de tipo <code>string</code>, observe: <code>type: 'text'</code>. Em segundo lugar, utilizamos a sintaxe de tipo <code>string[2]</code>, isso significa que o tipo passado ser\u00e1 um array com duas casas do tipo <code>string</code>, vejamos: <code>type: ['checkbox','bool']</code>.</p>"},{"location":"inputs/#groupformat","title":"groupFormat","text":"<p><code>groupFormat</code> \u00e9 a propriedade respos\u00e1vel por manipular o label e o component que \u00e9 criado em tela, ele indica o posicionamento do label em rela\u00e7\u00e3o ao componente que ser\u00e1 criado. Por padr\u00e3o o  label \u00e9 criado em cima do component desejado, mas essa op\u00e7\u00e3o pode mudar se especificado <code>down</code>, <code>left</code> ou <code>rigth</code>.</p> Contribuidores"},{"location":"janelas/","title":"Janelas","text":"<pre><code>\nexport interface window{\n    name:string;\n    type:string;\n    messageHome:string;\n    iconHome:string;\n    this:string;\n    pathController:string;\n    frames:Array&lt;frame&gt;\n    columnsGrid:columnsGrid[]\n    paramsGrid:string\n    button:button[]\n    joinChield:string[]\n    endPoints:endPoint[]\n}\n\n</code></pre> Propriedade Tipo Tefault Descri\u00e7\u00e3o <code>name</code> <code>string</code> Nome descritivo da janela <code>type</code> <code>string</code> <code>crud</code> Tipo da Janela <code>messageHome</code> <code>string</code> Mensagem de apresenta\u00e7\u00e3o inicial <code>iconHome</code> <code>string</code> Icone de apresenta\u00e7\u00e3o inicial - Icones v\u00e1lidos somente para bootstrap-icons <code>this</code> <code>string</code> objeto principal da janela <code>pathController</code> <code>string</code> path URL que representa o caminho do end-point vinculado a janela - Essa configura\u00e7\u00e3o serve como apoio nas cria\u00e7\u00f5es das URL's <code>frames</code> <code>Array</code> Cont\u00e9m uma lista de frames que ser\u00e3o vinculados a janela <code>columnsGrid</code> <code>Array</code> Configura as colunas que ser\u00e3o criadas no grid principal da janela <code>paramsGrid</code> <code>string</code> Configura o path URL para as consutas provenientes dos eventos grid <code>button</code> <code>Array</code> Guarda um array de bot\u00f5es que ser\u00e3o inputados na janela <code>joinChield</code> <code>Array</code> Para Janelas mais complexas, for\u00e7a o relacionamento entre objetos pai e filho <code>endPoints</code> <code>Array</code> Configura e faz interm\u00e9dio entre os bot\u00f5es a rotina de consumo REST Contribuidores"},{"location":"objetos/","title":"Os Objetos","text":""},{"location":"objetos/#amarracao-dos-objetos","title":"Amarra\u00e7\u00e3o dos Objetos","text":"<p>No rucula, todos os objetos s\u00e3o criados isoladamente um dos outros, isso facilita o desenvolvimento e manuten\u00e7\u00e3o da as propriedades que s\u00e3o criadas din\u00e2micamente. Al\u00e9m de facilitar no gerenciamento da obten\u00e7\u00e3o e inser\u00e7\u00e3o de dados. Para que cada objeto filho fique dentro do seu respectivo pai, \u00e9 necess\u00e1rio fazer a amarra\u00e7\u00e3o entre objetos hierarquicamente, isso garante que quando um objeto filho for passado para seu pai, ele j\u00e1 tenha recebido seus possiveis filhos.</p> <pre><code>{\n    \"joinChield\":[\n\n          \"ordem_de_servico.cliente\",\n          \"cliente.endereco\",\n          \"ordem_de_servico.itens_servico\",\n          \"ordem_de_servico.tecnico_responsavel\",\n          \"ordem_de_servico.pagamento\"\n    ]\n}\n</code></pre> <p>No exemplo acima haveria um erro, porque a hierarquia n\u00e3o est\u00e1 sendo respeitada, no background o rucula l\u00ea o  array da forma em que ele foi especificado, logo, teriamos <code>ordem_de_servico:cliente</code> e quando <code>cliente:endereco</code> fosse informado, haveria um erro pois o rucula n\u00e3o iria encontrar o objeto cliente.</p> <pre><code>{\n    \"joinChield\":[\n      \"cliente.endereco\",\n      \"ordem_de_servico.cliente\",\n      \"ordem_de_servico.itens_servico\",\n      \"ordem_de_servico.tecnico_responsavel\",\n      \"ordem_de_servico.pagamento\"\n    ],\n}\n</code></pre> <p>Agora aqui n\u00e3o teria erro porque primero foi passado a instru\u00e7\u00e3o de que o objeto endereco deve ser atribuido ao cliente que por sua vez \u00e9 atruido \u00e0 order_de_servico</p> <p><code>order_de_servico:cliente:endereco</code></p> Contribuidores"},{"location":"style/","title":"Style","text":"Classe descri\u00e7\u00e3o objetivo <code>r-i-control</code> Input de Cotrole Recebe entrada de texto <code>f-t-line</code> Frame Type Line Essa classe representa a caixa que obt\u00e9m a tabela para os inputs do tipo line <code>r-g-i-i</code> Grupo Item Input Guarda os inputs e os labels <code>r-q-l</code> Rucula Quadro Line Representa a caixa do frame do tipo line <code>r-q-b</code> Rucula Quadro Block Representa a caixa do frame do tipo Block <code>r-t-f</code> Rucula Titulo Frame ... Contribuidores"},{"location":"terminal/","title":"O Terminal","text":"<p>Desenvolver e observar o que o rucula faz por baixo dos panos pode ser um pouco confuso no come\u00e7o, mas para reduzir ao max\u00edmo essa possivel situa\u00e7\u00e3o, estamos desenvolvendo o terminal do rucula-js, com ele voc\u00ea pode digitar alguns comandos e ter informa\u00e7\u00f5es valiosas.</p>"},{"location":"terminal/#comandos-contidos-no-terminal","title":"Comandos contidos no Terminal","text":"comando objetivo <code>ruc --dep</code> Retorna todas as depend\u00eancias que est\u00e3o em aberto na tela do usu\u00e1rio. <code>ruc --obj</code> Retorna o objeto que est\u00e1 sendo construido durante a utiliza\u00e7\u00e3o da tela do usu\u00e1rio. <code>clear</code> ou <code>-c</code> Limpa as informa\u00e7\u00f5es presentes no Terminal <p>OBSERVA\u00c7\u00c3O IMPORTANTE: \u00c9 com base nas depend\u00eancias que o rucula sabe se o objeto que est\u00e1 sendo criado, est\u00e1 em perfeitas condi\u00e7\u00f5es para ser utilizado para outros fins, como por exemplo: Um envio <code>post</code> para uma API de terceiro.</p> Contribuidores"},{"location":"urls/","title":"Url's","text":"<p>No rucula-js a cria\u00e7\u00e3o de url's \u00e9 um processo din\u00e2mico, que ocorre a partir da leitura de algumas propriedades presentes na configura\u00e7\u00e3o global da janela e na configura\u00e7\u00e3o particular de cada janela.</p>"},{"location":"urls/#url-derivada-da-configuracao-global","title":"Url Derivada da Configura\u00e7\u00e3o Global","text":"<p>A url base, usada por todas as janelas \u00e9 criada a partir da configura\u00e7\u00e3o global, na configura\u00e7\u00e3o global temos uma proriedade chamada <code>environments</code>, nela existe uma array de ambientes que dar\u00e3o apoio \u00e1 todas as janelas, vejamos:</p> <pre><code>    \"environments\":[\n        {\n            \"env\":\"development\",\n            \"hostname\":\"http://localhost\",\n            \"port\": \"5016\"\n        }\n    ]\n</code></pre> propriedade descri\u00e7\u00e3o <code>env</code> identificador \u00fanico do ambiente <code>hostname</code> Aqui deve ser o protocolo  juntamente com a url de dom\u00ednio da aplica\u00e7\u00e3o. Nota: Voc\u00ea pode usar um n\u00famero ip no lugar do nome de dominio <code>port</code> \u00e9 o numero da porta da url <p>Durante o processo de cria\u00e7\u00e3o de url, o ruculs-js cria a url global padr\u00e3o na seguinte forma <code>http://localhost:5016</code></p>"},{"location":"urls/#path-controller-da-janela","title":"Path Controller da Janela","text":"<p>Normalmente teremos janelas que fazem acesso \u00e0 controllers especificos, por exemplo, ao criar uma janela chamada <code>Ordem de Servico</code> \u00e9 prov\u00e1vel que o path de servi\u00e7o utilizado pela janela seja <code>/OrdemServico</code> ou algo muito semelhante, o fato \u00e9 que a janela de fato ter\u00e1 os servi\u00e7os que utiliza dentro de <code>/OrdemServico</code>. A propriedade da janela que guarda o path controller \u00e9 <code>pathController</code>.</p> <p>Para esse caso a url seria criada utilizando a url de dominio do ambiente atual, tendo o apoio do exemplo acima, teriamos uma url completa na seguinte forma: <code>http://localhost:5016/OrdemServico</code></p>"},{"location":"urls/#path-relativo-de-maior-precedencia","title":"Path Relativo de Maior Preced\u00eancia","text":"<p>Os path's de maior precedencia tem o mesmo comportamento do <code>pathController</code>, entretanto, o Path Relativo de Maior Preced\u00eancia, se existir, substitui o <code>pathController</code>. Isso ocorre porque diferente do exemplo acima, existem casos em que \u00e9 necess\u00e1rio criar url's completas que fazem sentidos para casos mais especificos, por exemplo, mantendo o foco no caso anterior da <code>Ordem de Servico</code>, poderia existir um bot\u00e3o chamado <code>ChecarSaldoCliente</code>. Ao se tratar do cliente, provavelmente o path da url ter\u00e1 algo como <code>/Cliente</code>, nesse caso, ao chamar o bot\u00e3o <code>ChecarSaldoCliente</code>, a url completa criada seria <code>http://localhost:5016/Cliente</code>.</p> <p>A proriedade representante chama-se <code>urlrelative</code>, propriedade que est\u00e1 presente no objeto <code>endPoint</code>.</p>"},{"location":"urls/#observacao-importante","title":"Observa\u00e7\u00e3o importante","text":"<p>Para ambos os casos Path Controller da Janela e Path Relativo de Maior Preced\u00eancia, \u00e9 importante entender que os dois casos se complementam, por exemplo, uma janela  de Ordem de Servi\u00e7o ultilizada <code>/OrdemServico</code> para criar, alterar, excluir e consultar mas tamb\u00e9m pode trabalhar com quaisquer outros path's, como \u00e9 o caso do <code>ChecarSaldoCliente</code></p>"},{"location":"urls/#os-parametros-de-urls","title":"Os Parametros de Url's","text":"<p>Existem casos em que as url's devem ser criadas com parametros, para esses casos o rucula-js trabalha no n\u00edvel dos Pontos de Entradas, sendo mais especifico, com a propriedade <code>params</code>. Como exemplo iremos mostrar duas formas de efetuar uma exclus\u00e3o em uma ordem de servi\u00e7o.</p> <p>Com a url quase pronta  <code>http://localhost:5016/OrdemServico</code>, podemos passar os parametros em duas formas: </p> <ul> <li><code>?</code> seguido de <code>parametro={{objeto.nome}}</code>, caso tenha mais de um parametro, teriamos <code>parametro={{objeto.nome}}&amp;parametro={{objeto.nome2}}</code>. Esse constru\u00e7\u00e3o resultaria em algo como <code>?id={{orderServico.id}}</code></li> <li>Com <code>/</code> seguido de objeto <code>{{objeto.nome}}</code>, aqui a constru\u00e7\u00e3o seria <code>/{{orderServico.id}}</code> </li> </ul> <p>Nota: A sintaxe de objeto propriedade {{objeto.propriedade}}, pode ser substituida por constantes, exemplo: <code>?id=12345</code> ou <code>/12345</code></p> <p>Ap\u00f3s a constru\u00e7\u00e3o completa da url, teriamos <code>http://localhost:5016/OrdemServico?id=12345</code> ou <code>http://localhost:5016/OrdemServico/12345</code> </p> Contribuidores"}]}